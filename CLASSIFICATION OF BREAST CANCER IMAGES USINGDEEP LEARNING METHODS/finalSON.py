# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'final.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from sklearn.model_selection import KFold
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
import numpy as np
import cv2
import random
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt

from matplotlib.backends.backend_qt5agg import FigureCanvas
from matplotlib.figure import Figure 
from sklearn.metrics import precision_recall_fscore_support
from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QLabel, QMainWindow, QApplication, QWidget, QVBoxLayout
from PyQt5.QtGui import QPixmap
import sys

# import AI
import DatasetFuncs
import CustomFuncs

#Global Variables
glob_variables = {
        'img_width' : 128,
        'img_height': 128,
        
        'top_model_weights_path': 'bach/bottleneck_fc_model.h5',    #name for the weight file to save 
        
        'bach_data_dir': 'bach/',                                   #path to training images 
        'bioimaging_data_dir': 'bioimaging/',                        #path to testing images 
        
        'bach_patch_images_data_dir': 'train/',
        'bioimaging_patch_images_data_dir': 'test/',
        
        'num_classes': 4,
        'epochs': 16,
        'batch_size': 32,                                           #batch size used by flow_from_directory and predict_generator
        'patch_image_count': 20,
        
        'model': 'Xception',
        'activation': 'softmax',
        'optimizer': 'SGD'
}

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(750, 600)
        MainWindow.setMinimumSize(QtCore.QSize(750, 600))
        MainWindow.setMaximumSize(QtCore.QSize(750, 600))
        MainWindow.setAutoFillBackground(False)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 731, 571))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.progressBar = QtWidgets.QProgressBar(self.verticalLayoutWidget)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")
        self.gridLayout.addWidget(self.progressBar, 1, 0, 1, 1)
        self.console_textEdit = QtWidgets.QTextEdit(self.verticalLayoutWidget)
        self.console_textEdit.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.console_textEdit.setObjectName("console_textEdit")
        self.gridLayout.addWidget(self.console_textEdit, 2, 0, 1, 1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.trainButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.trainButton.setFont(font)
        self.trainButton.setObjectName("trainButton")
        self.horizontalLayout_3.addWidget(self.trainButton)
        self.testButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.testButton.setFont(font)
        self.testButton.setObjectName("testButton")
        self.horizontalLayout_3.addWidget(self.testButton)
        self.gridLayout_2.addLayout(self.horizontalLayout_3, 3, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSpacing(6)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.model_label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.model_label_2.setFont(font)
        self.model_label_2.setObjectName("model_label_2")
        self.horizontalLayout_2.addWidget(self.model_label_2)
        spacerItem = QtWidgets.QSpacerItem(114, 44, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.epoch_text = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.epoch_text.setFont(font)
        self.epoch_text.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.epoch_text.setObjectName("epoch_text")
        self.horizontalLayout_2.addWidget(self.epoch_text)
        self.gridLayout_2.addLayout(self.horizontalLayout_2, 2, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.model_label_3 = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.model_label_3.setFont(font)
        self.model_label_3.setObjectName("model_label_3")
        self.horizontalLayout.addWidget(self.model_label_3)
        self.model_comboBox = QtWidgets.QComboBox(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.model_comboBox.setFont(font)
        self.model_comboBox.setObjectName("model_comboBox")
        self.horizontalLayout.addWidget(self.model_comboBox)
        self.gridLayout_2.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setSpacing(6)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.model_label_4 = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.model_label_4.setFont(font)
        self.model_label_4.setObjectName("model_label_4")
        self.horizontalLayout_5.addWidget(self.model_label_4)
        self.size_comboBox = QtWidgets.QComboBox(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.size_comboBox.setFont(font)
        self.size_comboBox.setObjectName("size_comboBox")
        self.horizontalLayout_5.addWidget(self.size_comboBox)
        self.gridLayout_2.addLayout(self.horizontalLayout_5, 1, 0, 1, 1)
        self.horizontalLayout_4.addLayout(self.gridLayout_2)
        self.confussion_layout = QtWidgets.QHBoxLayout()
        self.confussion_layout.setObjectName("confussion_layout")
        self.horizontalLayout_4.addLayout(self.confussion_layout)
        self.gridLayout.addLayout(self.horizontalLayout_4, 0, 0, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Classification of Breast Cancer Images Using Deep Learning Methods"))
        self.console_textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.trainButton.setText(_translate("MainWindow", "Test BACH"))
        self.testButton.setText(_translate("MainWindow", "Test Bioimagine"))
        self.model_label_2.setText(_translate("MainWindow", "Epoch: "))
        self.epoch_text.setText(_translate("MainWindow", "16"))
        self.model_label_3.setText(_translate("MainWindow", "Model:"))
        self.model_label_4.setText(_translate("MainWindow", "Size:"))


    def test(self):
        # self.console_textEdit.append("----Bioimaging Test Started----")
        self.console_textEdit.append(glob_variables['model'] + ' ' + str(glob_variables['img_width']) + ' Epoch: ' + str(glob_variables['epochs']))

        validation_data,validation_labels = DatasetFuncs.load_bach_bottleneck(glob_variables)
        class_labels= ['Benign','InSitu','Invasive','Normal']
        
        model = Sequential()
        model.add(Flatten(input_shape=validation_data.shape[1:]))
        model.add(Dense(256, activation='relu'))
        model.add(Dropout(0.5))
        model.add(Dense(glob_variables['num_classes'], 
                        activation=glob_variables['activation']))
        
        model.compile(optimizer=glob_variables['optimizer'],
                      loss='poisson', 
                      metrics=['accuracy'])
        
        history = model.fit(validation_data,
                            validation_labels ,
                            epochs=glob_variables['epochs'],
                            batch_size=glob_variables['batch_size'])
        
        #model.save_weights(top_model_weights_path)

        bioimaging_data, bioimaging_labels = DatasetFuncs.load_bioimaging_bottleneck(glob_variables)
        
        (eval_loss, eval_accuracy) = model.evaluate(bioimaging_data, 
                                                    bioimaging_labels, 
                                                    batch_size=glob_variables['batch_size'], 
                                                    verbose=1)
        self.progressBar.setValue(40)
        pred = model.predict(bioimaging_data, verbose = 0)
        y_pred = np.argmax(pred, axis = 1)
        y_test = np.argmax(bioimaging_labels, axis = 1)
        
        cnf_matrix = confusion_matrix(y_test, y_pred)
        
        
        CustomFuncs.plot_confusion_matrix(cnf_matrix,classes=class_labels,
                                          normalize=False,
                                          title='Confusion matrix', 
                                          cmap=plt.cm.Blues)

        
        if self.confussion_layout.isEmpty() == False:
            for i in reversed(range(self.confussion_layout.count())):
                self.confussion_layout.removeWidget(self.confussion_layout.itemAt(i).widget())
        
        
        label = QtWidgets.QLabel(self.centralwidget)
        label.setMaximumWidth(448)
        label.setMaximumHeight(336)
        label.setScaledContents(True)
        pixmap = QPixmap("confusion_matrix.png")
        # pixmap.scaled(192, 144)
        label.setPixmap(pixmap)
        self.confussion_layout.addWidget(label)

        
        self.console_textEdit.append("[INFO] accuracy: {:.2f}%".format(eval_accuracy * 100))
        # self.console_textEdit.append("[INFO] Loss: {}".format(eval_loss))
        
        precision, recall, f1, _ = precision_recall_fscore_support(y_test, y_pred, average = "weighted")
        
        self.progressBar.setValue(85)
        
        self.console_textEdit.append("Precision: " + str(precision))
        self.console_textEdit.append("Recall: " + str(recall))
        self.console_textEdit.append("F1: " + str(f1))
        
        self.progressBar.setValue(100)
        self.console_textEdit.append(" ")
    
    
    def testClicked(self):
        self.progressBar.setValue(0)
        size_index = self.size_comboBox.currentIndex()
        if size_index == 0:
            glob_variables['img_width'] = 256
            glob_variables['img_height'] = 256
        elif size_index == 1:
            glob_variables['img_width'] = 128
            glob_variables['img_height'] = 128
        elif size_index == 2:
            glob_variables['img_width'] = 64
            glob_variables['img_height'] = 64
        
        glob_variables['model'] = self.model_comboBox.currentText()
        glob_variables['epochs'] = int(self.epoch_text.text())
        
        self.console_textEdit.append("----Bioimaging Test Started----")
        self.test()

        
    def setupUI(self, MainWindow):
        self.model_comboBox.addItems(["Xception", 
                                      "NASNetLarge", 
                                      "DenseNet201", 
                                      "VGG16", 
                                      "VGG16", 
                                      "VGG19",
                                      "InceptionV3",
                                      "InceptionResNetV2",
                                      "ResNet152V2"])
        
        self.size_comboBox.addItems(["256x256", 
                                     "128x128", 
                                     "64x64"])
        self.testButton.clicked.connect(self.testClicked)

from mplwidget import MplWidget


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.setupUI(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

